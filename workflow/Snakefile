import warnings
from pathlib import Path

import pandas as pd

from lib.shared.target_utils import get_sbs_combinations, get_phenotype_combinations
from lib.shared.initialize_paramsearch import initialize_segment_sbs_paramsearch
from lib.shared.initialize_paramsearch import initialize_segment_phenotype_paramsearch

# Get the general configuration options
ROOT_FP = Path(config["all"]["root_fp"])

# Get paths to the sample files dfs
SBS_SAMPLES_FP = Path(config["preprocess"]["sbs_samples_fp"])
PHENOTYPE_SAMPLES_FP = Path(config["preprocess"]["phenotype_samples_fp"])

# Load sbs samples if they exist
sbs_samples_df = pd.read_csv(SBS_SAMPLES_FP, sep="\t")
SBS_SAMPLE_FPS = list(sbs_samples_df["sample_fp"].unique())
if len(SBS_SAMPLE_FPS) > 0:
    SBS_TILES = list(sbs_samples_df["tile"].unique())
    SBS_VALID_COMBINATIONS = get_sbs_combinations(sbs_samples_df)
else:
    print("No SBS samples found!")
    SBS_TILES = []
    SBS_VALID_COMBINATIONS = []

# Load phenotype samples if they exist
phenotype_samples_df = pd.read_csv(PHENOTYPE_SAMPLES_FP, sep="\t")
PHENOTYPE_SAMPLE_FPS = list(phenotype_samples_df["sample_fp"].unique())
if len(PHENOTYPE_SAMPLE_FPS) > 0:
    PHENOTYPE_TILES = list(phenotype_samples_df["tile"].unique())
    PHENOTYPE_VALID_COMBINATIONS = get_phenotype_combinations(phenotype_samples_df)
else:
    print("No phenotype samples found!")
    PHENOTYPE_TILES = []
    PHENOTYPE_VALID_COMBINATIONS = []


# NOTE: restrict wells and tiles for testing
# TODO: unrestrict wells and tiles after testing
SBS_TILES = [1, 2]
PHENOTYPE_TILES = [1, 2]


include: "targets/preprocess.smk"
include: "rules/preprocess.smk"


ALL_TARGETS = PREPROCESS_TARGETS_ALL

if "sbs" in config and len(sbs_wildcard_combos) > 0:
    # TODO: test and implement segmentation paramsearch for updated brieflow setup
    # # Initialize parameter search configurations if needed
    # if config["sbs"]["mode"] == "segment_sbs_paramsearch":
    #     config = initialize_segment_sbs_paramsearch(config)

    # Include target and rule files
    include: "targets/sbs.smk"
    include: "rules/sbs.smk"

    ALL_TARGETS += SBS_TARGETS_ALL


if "phenotype" in config and len(phenotype_wildcard_combos) > 0:
    # TODO: test and implement segmentation paramsearch for updated brieflow setup
    # # Initialize parameter search configurations if needed
    # if config["phenotype"]["mode"] == "segment_phenotype_paramsearch":
    #     config = initialize_segment_phenotype_paramsearch(config)

    # Include target and rule files
    include: "targets/phenotype.smk"
    include: "rules/phenotype.smk"

    ALL_TARGETS += PHENOTYPE_TARGETS_ALL


if "merge" in config:

    # Include target and rule files
    include: "targets/merge.smk"
    include: "rules/merge.smk"

    ALL_TARGETS += MERGE_TARGETS_ALL


if "aggregate" in config:

    # Include target and rule files
    include: "targets/aggregate.smk"
    include: "rules/aggregate.smk"

    ALL_TARGETS += AGGREGATE_TARGETS_ALL


if "cluster" in config:

    # Include target and rule files
    include: "targets/cluster.smk"
    include: "rules/cluster.smk"

    ALL_TARGETS += CLUSTER_TARGETS_ALL


# Define the target files for the workflow
rule all:
    input:
        ALL_TARGETS,
