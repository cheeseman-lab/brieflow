import logging
from pathlib import Path

import pandas as pd

from lib.shared.initialize_paramsearch import initialize_segment_paramsearch
from lib.shared.target_utils import outputs_to_targets, map_outputs

# Get the general configuration options
ROOT_FP = Path(config["all"]["root_fp"])

# Get paths to the sample files dfs
SBS_SAMPLES_FP = Path(config["preprocess"]["sbs_samples_fp"])
PHENOTYPE_SAMPLES_FP = Path(config["preprocess"]["phenotype_samples_fp"])

# load data for samples (this should go into helper function and be stored better)
# Load the sample TSV files with pandas
sbs_samples_df = pd.read_csv(SBS_SAMPLES_FP, sep="\t")
sbs_samples_df = sbs_samples_df.sort_values(by=["well", "tile", "cycle"])
SBS_WELLS = list(sbs_samples_df["well"].unique())
SBS_TILES = list(sbs_samples_df["tile"].unique())
SBS_CYCLES = list(sbs_samples_df["cycle"].unique())
# TODO: unrestrict wells and tiles after testing
SBS_WELLS = ["A1"]
SBS_TILES = [1]

phenotype_samples_df = pd.read_csv(PHENOTYPE_SAMPLES_FP, sep="\t")
phenotype_samples_df = phenotype_samples_df.sort_values(by=["well", "tile"])
PHENOTYPE_WELLS = list(phenotype_samples_df["well"].unique())
PHENOTYPE_TILES = list(phenotype_samples_df["tile"].unique())

include: "targets/preprocess.smk"
include: "rules/preprocess.smk"

ALL_TARGETS = PREPROCESS_TARGETS_ALL

if "sbs_process" in config:

    include: "targets/sbs_process.smk"

    # print("before paramsearch update")
    # print("wildcards", SBS_PROCESS_WILDCARDS)
    # print("outputs", SBS_PROCESS_OUTPUTS)
    # print("mapped outputs", SBS_PROCESS_OUTPUTS_MAPPED)
    # print("targets", SBS_PROCESS_TARGETS)
    # print("targets all", SBS_PROCESS_TARGETS_ALL)

    # If paramsearch mode, get the outputs first
    if config["sbs_process"]["mode"] == "segment_paramsearch":
        # Generate the paramsearch outputs
        config, nuclei_paramspace, cell_paramspace, paramsearch_outputs = initialize_segment_paramsearch(config)
        # Update the global variables
        SBS_PROCESS_OUTPUTS.update(paramsearch_outputs)
        SBS_PROCESS_OUTPUT_MAPPINGS.update({"segment_paramsearch": None, "segment_paramsearch_summary": None})  
        SBS_PROCESS_WILDCARDS.update({
            "nuclei_diameter": nuclei_paramspace,
            "cell_diameter": cell_paramspace
        })
        # Repeat the mapping and target generation
        SBS_PROCESS_OUTPUTS_MAPPED = map_outputs(SBS_PROCESS_OUTPUTS, SBS_PROCESS_OUTPUT_MAPPINGS)
        SBS_PROCESS_TARGETS = outputs_to_targets(SBS_PROCESS_OUTPUTS_MAPPED, SBS_PROCESS_WILDCARDS)
        SBS_PROCESS_TARGETS_ALL = sum(SBS_PROCESS_TARGETS.values(), [])

    # print("after paramsearch update")
    # print("wildcards", SBS_PROCESS_WILDCARDS)
    # print("outputs", SBS_PROCESS_OUTPUTS)
    # print("mapped outputs", SBS_PROCESS_OUTPUTS_MAPPED)
    # print("targets", SBS_PROCESS_TARGETS)
    # print("targets all", SBS_PROCESS_TARGETS_ALL)

    include: "rules/sbs_process.smk"

    ALL_TARGETS += SBS_PROCESS_TARGETS_ALL



# Define the target files for the workflow
rule all:
    input:
        ALL_TARGETS,
