import logging
from pathlib import Path

import pandas as pd

from lib.shared.initialize_paramsearch import initialize_segment_sbs_paramsearch
from lib.shared.initialize_paramsearch import initialize_mapping_sbs_paramsearch
from lib.shared.initialize_paramsearch import initialize_segment_phenotype_paramsearch
from lib.shared.target_utils import outputs_to_targets, map_outputs

# Get the general configuration options
ROOT_FP = Path(config["all"]["root_fp"])

# Get paths to the sample files dfs
SBS_SAMPLES_FP = Path(config["preprocess"]["sbs_samples_fp"])
PHENOTYPE_SAMPLES_FP = Path(config["preprocess"]["phenotype_samples_fp"])

# load data for samples (this should go into helper function and be stored better)
# Load the sample TSV files with pandas
sbs_samples_df = pd.read_csv(SBS_SAMPLES_FP, sep="\t")
sbs_samples_df = sbs_samples_df.sort_values(by=["well", "tile", "cycle"])
SBS_WELLS = list(sbs_samples_df["well"].unique())
SBS_TILES = list(sbs_samples_df["tile"].unique())
SBS_CYCLES = list(sbs_samples_df["cycle"].unique())

phenotype_samples_df = pd.read_csv(PHENOTYPE_SAMPLES_FP, sep="\t")
phenotype_samples_df = phenotype_samples_df.sort_values(by=["well", "tile"])
PHENOTYPE_WELLS = list(phenotype_samples_df["well"].unique())
PHENOTYPE_TILES = list(phenotype_samples_df["tile"].unique())

# TODO: unrestrict wells and tiles after testing
SBS_WELLS = ["A1"]
SBS_TILES = [1]
PHENOTYPE_WELLS = ["A1"]
PHENOTYPE_TILES = [1]

include: "targets/preprocess.smk"
include: "rules/preprocess.smk"

ALL_TARGETS = PREPROCESS_TARGETS_ALL

if "sbs_process" in config:

    include: "targets/sbs_process.smk"

    # print("before paramsearch update")
    # print("wildcards", SBS_PROCESS_WILDCARDS)
    # print("outputs", SBS_PROCESS_OUTPUTS)
    # print("mapped outputs", SBS_PROCESS_OUTPUTS_MAPPED)
    # print("targets", SBS_PROCESS_TARGETS)
    # print("targets all", SBS_PROCESS_TARGETS_ALL)

    # Update targets and wildcards for segment_paramsearch mode
    if config["sbs_process"]["mode"] == "segment_sbs_paramsearch":
        config, nuclei_diameters, cell_diameters, flow_thresholds, cell_probs, paramsearch_outputs = initialize_segment_sbs_paramsearch(config)
        
        SBS_PROCESS_OUTPUTS.update(paramsearch_outputs)
        SBS_PROCESS_OUTPUT_MAPPINGS.update({
            "segment_sbs_paramsearch": None, 
            "summarize_segment_sbs_paramsearch": None
        })
        
        
        SBS_PROCESS_WILDCARDS.update({
            "nuclei_diameter": nuclei_diameters,
            "cell_diameter": cell_diameters,
            "flow_threshold": flow_thresholds,
            "cellprob_threshold": cell_probs
        })
        
        SBS_PROCESS_OUTPUTS_MAPPED = map_outputs(SBS_PROCESS_OUTPUTS, SBS_PROCESS_OUTPUT_MAPPINGS)
        SBS_PROCESS_TARGETS = outputs_to_targets(SBS_PROCESS_OUTPUTS_MAPPED, SBS_PROCESS_WILDCARDS)
        SBS_PROCESS_TARGETS_ALL = sum(SBS_PROCESS_TARGETS.values(), [])


    # Update Snakefile condition:
    if config["sbs_process"]["mode"] == "mapping_sbs_paramsearch":
        config, threshold_peaks, q_mins, paramsearch_outputs = initialize_mapping_sbs_paramsearch(config)
        
        SBS_PROCESS_OUTPUTS.update(paramsearch_outputs)
        SBS_PROCESS_OUTPUT_MAPPINGS.update({
            "extract_bases_sbs_paramsearch": None,
            "call_reads_sbs_paramsearch": None, 
            "call_cells_sbs_paramsearch": None,
            "summarize_mapping_sbs_paramsearch": None
        })
        
        SBS_PROCESS_WILDCARDS.update({
            "threshold_peaks": threshold_peaks,
            "q_min": q_mins
        })
        
        SBS_PROCESS_OUTPUTS_MAPPED = map_outputs(SBS_PROCESS_OUTPUTS, SBS_PROCESS_OUTPUT_MAPPINGS)
        SBS_PROCESS_TARGETS = outputs_to_targets(SBS_PROCESS_OUTPUTS_MAPPED, SBS_PROCESS_WILDCARDS)
        SBS_PROCESS_TARGETS_ALL = sum(SBS_PROCESS_TARGETS.values(), [])

    # print("after paramsearch update")
    # print("wildcards", SBS_PROCESS_WILDCARDS)
    # print("outputs", SBS_PROCESS_OUTPUTS)
    # print("mapped outputs", SBS_PROCESS_OUTPUTS_MAPPED)
    # print("targets", SBS_PROCESS_TARGETS)
    # print("targets all", SBS_PROCESS_TARGETS_ALL)

    include: "rules/sbs_process.smk"

    ALL_TARGETS += SBS_PROCESS_TARGETS_ALL


if "phenotype_process" in config:
    include: "targets/phenotype_process.smk"
    
    # Update targets and wildcards for segment_paramsearch mode
    if config["phenotype_process"]["mode"] == "segment_phenotype_paramsearch":
        (
            config,
            nuclei_diameters,
            cell_diameters,
            flow_thresholds,
            cell_probs,
            paramsearch_outputs
        ) = initialize_segment_phenotype_paramsearch(config)
        
        PHENOTYPE_PROCESS_OUTPUTS.update(paramsearch_outputs)
        PHENOTYPE_PROCESS_OUTPUT_MAPPINGS.update({
            "segment_phenotype_paramsearch": None,
            "summarize_segment_phenotype_paramsearch": None
        })
        
        PHENOTYPE_PROCESS_WILDCARDS.update({
            "nuclei_diameter": nuclei_diameters,
            "cell_diameter": cell_diameters,
            "flow_threshold": flow_thresholds,
            "cellprob_threshold": cell_probs
        })
        
        PHENOTYPE_PROCESS_OUTPUTS_MAPPED = map_outputs(
            PHENOTYPE_PROCESS_OUTPUTS,
            PHENOTYPE_PROCESS_OUTPUT_MAPPINGS
        )
        PHENOTYPE_PROCESS_TARGETS = outputs_to_targets(
            PHENOTYPE_PROCESS_OUTPUTS_MAPPED,
            PHENOTYPE_PROCESS_WILDCARDS
        )
        PHENOTYPE_PROCESS_TARGETS_ALL = sum(PHENOTYPE_PROCESS_TARGETS.values(), [])

    include: "rules/phenotype_process.smk"
    ALL_TARGETS += PHENOTYPE_PROCESS_TARGETS_ALL


# Define the target files for the workflow
rule all:
    input:
        ALL_TARGETS,
