import warnings
from pathlib import Path

import pandas as pd

from lib.shared.initialize_paramsearch import initialize_segment_sbs_paramsearch
from lib.shared.initialize_paramsearch import initialize_segment_phenotype_paramsearch

# Get the general configuration options
ROOT_FP = Path(config["all"]["root_fp"])

# Get paths to the sample and combo files dfs
SBS_SAMPLES_FP = Path(config["preprocess"]["sbs_samples_fp"])
SBS_COMBO_FP = Path(config["preprocess"]["sbs_combo_fp"])
PHENOTYPE_SAMPLES_FP = Path(config["preprocess"]["phenotype_samples_fp"])
PHENOTYPE_COMBO_FP = Path(config["preprocess"]["phenotype_combo_fp"])

# Load sbs samples if they exist
sbs_samples_df = pd.read_csv(SBS_SAMPLES_FP, sep="\t")
if len(sbs_samples_df) > 0:
    sbs_wildcard_combos = pd.read_csv(SBS_COMBO_FP, sep="\t").astype(str)
else:
    print("No SBS samples found!")
    sbs_wildcard_combos = pd.DataFrame(
        columns=["plate", "well", "tile", "cycle"]
    ).astype(str)

# Load phenotype samples if they exist
phenotype_samples_df = pd.read_csv(PHENOTYPE_SAMPLES_FP, sep="\t")
if len(phenotype_samples_df) > 0:
    phenotype_wildcard_combos = pd.read_csv(PHENOTYPE_COMBO_FP, sep="\t").astype(str)
else:
    print("No phenotype samples found!")
    phenotype_wildcard_combos = pd.DataFrame(
        columns=["plate", "well", "tile", "cycle"]
    ).astype(str)

# Check for plate filter
# If plate filter is set, only process the specified plate
plate_filter = config.get("plate_filter", None)
if plate_filter is not None:
    plate_filter = str(plate_filter)
    print(f"PLATE FILTER: Processing only plate {plate_filter}")

    if len(sbs_samples_df) > 0:
        sbs_samples_df = sbs_samples_df[sbs_samples_df["plate"] == plate_filter]
        sbs_wildcard_combos = sbs_wildcard_combos[
            sbs_wildcard_combos["plate"] == plate_filter
        ]
        print(
            f"Filtered SBS samples to {len(sbs_samples_df)} rows for plate {plate_filter}"
        )
    if len(phenotype_samples_df) > 0:
        phenotype_samples_df = phenotype_samples_df[
            phenotype_samples_df["plate"] == plate_filter
        ]
        phenotype_wildcard_combos = phenotype_wildcard_combos[
            phenotype_wildcard_combos["plate"] == plate_filter
        ]
        print(
            f"Filtered phenotype samples to {len(phenotype_samples_df)} rows for plate {plate_filter}"
        )


# TODO: restrict wells and tiles for testing
# TODO: unrestrict wells and tiles after testing
# sbs_wildcard_combos = sbs_wildcard_combos[
#     ((sbs_wildcard_combos["plate"] == "1") & (sbs_wildcard_combos["well"] == "A1"))
# ]
# sbs_wildcard_combos = sbs_wildcard_combos[sbs_wildcard_combos["tile"].isin(["1", "2"])]
# phenotype_wildcard_combos = phenotype_wildcard_combos[
#     (
#         (phenotype_wildcard_combos["plate"] == "1")
#         & (phenotype_wildcard_combos["well"] == "A1")
#     )
# ]
# phenotype_wildcard_combos = phenotype_wildcard_combos[
#     phenotype_wildcard_combos["tile"].isin(["1", "2"])
# ]


include: "targets/preprocess.smk"
include: "rules/preprocess.smk"


ALL_TARGETS = PREPROCESS_TARGETS_ALL

if "sbs" in config and len(sbs_wildcard_combos) > 0:
    # TODO: test and implement segmentation paramsearch for updated brieflow setup
    # # Initialize parameter search configurations if needed
    # if config["sbs"]["mode"] == "segment_sbs_paramsearch":
    #     config = initialize_segment_sbs_paramsearch(config)

    # Include target and rule files
    include: "targets/sbs.smk"
    include: "rules/sbs.smk"

    ALL_TARGETS += SBS_TARGETS_ALL


if "phenotype" in config and len(phenotype_wildcard_combos) > 0:
    # TODO: test and implement segmentation paramsearch for updated brieflow setup
    # # Initialize parameter search configurations if needed
    # if config["phenotype"]["mode"] == "segment_phenotype_paramsearch":
    #     config = initialize_segment_phenotype_paramsearch(config)

    # Include target and rule files
    include: "targets/phenotype.smk"
    include: "rules/phenotype.smk"

    ALL_TARGETS += PHENOTYPE_TARGETS_ALL


if "merge" in config:
    MERGE_COMBO_FP = Path(config["preprocess"]["merge_combo_fp"])
    merge_wildcard_combos = pd.read_csv(MERGE_COMBO_FP, sep="\t")

    # Include target and rule files
    include: "targets/merge.smk"
    include: "rules/merge.smk"

    ALL_TARGETS += MERGE_TARGETS_ALL


if "aggregate" in config:

    # Include target and rule files
    include: "targets/aggregate.smk"
    include: "rules/aggregate.smk"

    ALL_TARGETS += AGGREGATE_TARGETS_ALL


if "cluster" in config:

    # Include target and rule files
    include: "targets/cluster.smk"
    include: "rules/cluster.smk"

    ALL_TARGETS += CLUSTER_TARGETS_ALL


# Define the target files for the workflow
rule all:
    input:
        ALL_TARGETS,
