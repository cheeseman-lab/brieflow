import resource
import gc
import warnings
from pathlib import Path
import pandas as pd
import time

def print_memory_usage(message):
    # No garbage collection - shows what SLURM would see
    memory_used = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    memory_used /= 1024  # Convert KB to MB
    print(f"REAL MEMORY PROFILE - {message}: {memory_used:.2f} MB (what SLURM sees)")

# STEP 1: Imports and initial setup
start_time = time.time()
print_memory_usage("After imports")

# Get the general configuration options
ROOT_FP = Path(config["all"]["root_fp"])

# Get paths to the sample and combo files dfs
SBS_SAMPLES_FP = Path(config["preprocess"]["sbs_samples_fp"])
SBS_COMBO_FP = Path(config["preprocess"]["sbs_combo_fp"])
PHENOTYPE_SAMPLES_FP = Path(config["preprocess"]["phenotype_samples_fp"])
PHENOTYPE_COMBO_FP = Path(config["preprocess"]["phenotype_combo_fp"])

print_memory_usage("After setup")
print(f"Setup time: {time.time() - start_time:.2f} seconds")

# STEP 2: Load data and pre-saved combinations
start_time = time.time()

# Load sbs samples if they exist
sbs_samples_df = pd.read_csv(SBS_SAMPLES_FP, sep="\t")
print_memory_usage("After loading SBS samples")

# Load phenotype samples if they exist
phenotype_samples_df = pd.read_csv(PHENOTYPE_SAMPLES_FP, sep="\t")
print_memory_usage("After loading PHENOTYPE samples")

# Print the samples df length
print(f"Number of SBS samples: {len(sbs_samples_df)}")
print(f"Number of PHENOTYPE samples: {len(phenotype_samples_df)}")

if len(sbs_samples_df) > 0:
    # Load pre-saved combinations
    sbs_wildcard_combos = pd.read_csv(SBS_COMBO_FP, sep="\t")
    print_memory_usage("After loading SBS combinations")
else:
    print("No SBS samples found!")
    sbs_wildcard_combos = pd.DataFrame(columns=["plate", "well", "tile", "cycle"])

if len(phenotype_samples_df) > 0:
    # Load pre-saved combinations
    phenotype_wildcard_combos = pd.read_csv(PHENOTYPE_COMBO_FP, sep="\t")
    print_memory_usage("After loading PHENOTYPE combinations")
else:
    print("No phenotype samples found!")
    phenotype_wildcard_combos = pd.DataFrame(columns=["plate", "well", "tile", "cycle"])

# Print number of combinations
print(f"Number of SBS combinations: {len(sbs_wildcard_combos)}")
print(f"Number of PHENOTYPE combinations: {len(phenotype_wildcard_combos)}")

# STEP 3: Include rule files and build DAG
start_time = time.time()

print_memory_usage("Before including targets/rules")
include: "targets/preprocess_well.smk"
include: "rules/preprocess_well.smk"
print_memory_usage("After including preprocess targets/rules")

ALL_TARGETS = PREPROCESS_TARGETS_ALL

print_memory_usage("Before rule all definition")

# Define the target files for the workflow
rule all:
    input:
        ALL_TARGETS,

print_memory_usage("After rule all definition (Final DAG built)")
print(f"DAG building time: {time.time() - start_time:.2f} seconds")